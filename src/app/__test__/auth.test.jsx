const required = require("supertest"); // import th∆∞ vi·ªán supertest
let access_token = ""; //khai b√°o bi·∫øn access_token

//test login
describe("Login tests", () => {
  //khai b√°o bi·∫øn body ki·ªÉu obj c√≥ 2 tr∆∞·ªùng l√† phone v√† password (request body)
  const body = {
    phone: "0932323232",
    password: "Abc@123456",
  };

  //vi·∫øt code test login (phone v√† password ƒë·ªÅu ƒë√∫ng  => tr·∫£ ra HTTP status 201)
  it("should call endpoint with phone & password true, return 201", async () => {
    //khai b√°o bi·∫øn response nh·∫≠n gi√° tr·ªã response khi call api login tr·∫£ v·ªÅ
    const response = await required( //d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
      `https://gce.onedev.top/api/v1/auth/sign-in` //link api login
    )
      .post("") //ph∆∞∆°ng th·ª©c post
      .send(body); //g·ª≠i body request l√™n
    access_token = response._body.access_token; //bi·∫øn access_token nh·∫≠n gi√° tr·ªã access_token t·ª´ response tr·∫£ ra khi login th√†nh c√¥ng
    expect(response.statusCode).toBe(201); //so s√°nh http status th√†nh c√¥ng tr·∫£ ra 201 => ƒë√∫ng
  });

  //vi·∫øt code test login (phone ho·∫∑c password sai => tr·∫£ ra HTTP status 401)
  it("should call endpoint with phone & password false, return 401", async () => {
     //khai b√°o bi·∫øn response nh·∫≠n gi√° tr·ªã response khi call api login tr·∫£ v·ªÅ
    const response = await required( //d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
      `https://gce.onedev.top/api/v1/auth/sign-in` //link api login
    )
      .post("") //ph∆∞∆°ng th·ª©c post
      .send(body); //g·ª≠i body request l√™n
    expect(response.statusCode).toBe(401); //so s√°nh http status tr·∫£ ra 401 => phone ho·∫∑c password sai
  });
});

// Ph·∫ßn n√†y c·ªßa Ng√¢n
// describe('Create product tests',  () => {

//   const body = {
//     name: "Laptop MSI Gaming Raider GE77HX 12UHS-229VN i9 12900HX/64GB/2TB/17.3UHD/Nvidia RTX 3080Ti 16GB/Win11",
//     description: "Si√™u m√°y t√≠nh MSI Gaming Raider GE77HX 12UHS-229VN ƒë√≠ch th·ª±c l√† m·ªôt con qu√°i v·∫≠t c·∫•u h√¨nh v·ªõi nh·ªØng th√¥ng s·ªë m·∫°nh nh·∫•t c√≥ th·ªÉ ƒëi c√πng m·ªôt thi·∫øt k·∫ø ƒë·∫πp kh√≥ c∆∞·ª°ng. H√£y c√πng xem b·ªô vi x·ª≠ l√Ω Intel Core i9 12900HX v√† card ƒë·ªì h·ªça RTX 3080 Ti c√≥ th·ªÉ mang ƒë·∫øn nh·ªØng tr·∫£i nghi·ªám ƒë·ªânh cao nh∆∞ th·∫ø n√†o.",
//     images: [
//       {
//         name: "14",
//         image_url: "https://gce.onedev.top/uploads/a838d2f3310b06ccdf24ee238bbb3b8c9.jpg",
//         resource_type: "products",
//         resource_id: "",
//         description: ""
//       }
//     ],
//     price: 126990000,
//     amount: 88893000,
//     percent_discount: 30,
//     product_category_id: "a7555d82-b4d1-41d6-bb4b-76d5ed516699",
//     user_id: "7cf56e74-4d72-4465-a005-7ad22fcaf229",
//   }

//     it("should return 200", async () => {
//       const response = await required(`https://gce.onedev.top/api/v1/e-commerce/products`).post("").send(body).set('Authorization', `Bearer ${access_token}`);
//       expect(response.statusCode).toBe(201);
//     }, 10000)
//     it("should return 400", async () => {
//       const response = await required(`https://gce.onedev.top/api/v1/e-commerce/products`).post("").send(body).set('Authorization', `Bearer ${access_token}`);
//       expect(response.statusCode).toBe(400);
//     }, 10000)
// });

// Ph·∫ßn n√†y c·ªßa H·∫±ng

//Test t·∫°o m·ªõi news
describe('Create news tests',  () => {
  //khai b√°o bi·∫øn body (request body)
  const body = {
    name: "Test t·∫°o m·ªõi tin t·ª©c",
    content: "<p>Test api t·∫°o m·ªõi tin t·ª©c</p>",
    tags: [
        "test"
    ],
    mentions: [
        "03ac41b5-2bc7-476c-9f7c-773ea8e01ade",
        "54539dd5-0296-463e-b1c7-82bfabaa885f"
    ],
    feeling: "FEELINGS.FANTASTIC-ü§©",
    type: "2",
    organization_id: "",
    images: [
        {
            "name": "25",
            "image_url": "https://gce.onedev.top/uploads/78fe6d9b4324fe7109aaf905116e7816.jpg",
            "resource_id": null
        }
    ],
    user_id: "a4a2c905-3b78-4871-88e0-1d57b2cec5b0"
}

  //Vi·∫øt code test n·∫øu request body g·ª≠i l√™n ƒë√∫ng => tr·∫£ ra HTTP status 200
    it("should return 200", async () => {
      const response = await required(//d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
        `https://gce.onedev.top/api/v1/news` //link api t·∫°o m·ªõi news
      ).post("") // ph∆∞∆°ng th·ª©c post
      .send(body) //g·ª≠i request body l√™n
      .set('Authorization', `Bearer ${access_token}`); // set access_token ƒë·ªÉ g·ªçi ƒë∆∞·ª£c api
      expect(response.statusCode).toBe(201); //so s√°nh http status th√†nh c√¥ng tr·∫£ ra 201 => ƒë√∫ng
    }, 10000)
    //vi·∫øt code test n·∫øu request body g·ª≠i l√™n sai => tr·∫£ ra HTTP status 400
    it("should return 400", async () => {
      const response = await required(//d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
        `https://gce.onedev.top/api/v1/news` //link api t·∫°o m·ªõi news
        ).post("") // ph∆∞∆°ng th·ª©c post
        .send(body) //g·ª≠i request body l√™n
        .set('Authorization', `Bearer ${access_token}`); // set access_token ƒë·ªÉ g·ªçi ƒë∆∞·ª£c api
      expect(response.statusCode).toBe(400); //so s√°nh http status sai tr·∫£ ra 400 => sai
    }, 10000)
});

// Ph·∫ßn n√†y c·ªßa H·∫±ng

//Test update news
describe("Update news tests", () => {
  //khai b√°o bi·∫øn id 
  const id = "2ddad5a1-6bd8-492e-8551-66efefae0aa1";
  //khai b√°o bi·∫øn body (request body)
  const body = {
    name: "Test t·∫°o m·ªõi tin t·ª©c",
    content: "<p>Test api t·∫°o m·ªõi tin t·ª©c 123</p>",
    tags: ["test"],
    mentions: [
      "03ac41b5-2bc7-476c-9f7c-773ea8e01ade",
      "54539dd5-0296-463e-b1c7-82bfabaa885f",
    ],
    feeling: "FEELINGS.FANTASTIC-ü§©",
    type: "2",
    organization_id: "",
    images: [
      {
        name: "25",
        image_url:
          "https://gce.onedev.top/uploads/78fe6d9b4324fe7109aaf905116e7816.jpg",
        resource_id: null,
      },
    ],
    user_id: "a4a2c905-3b78-4871-88e0-1d57b2cec5b0",
  };

  //vi·∫øt code test n·∫øu id ƒë√∫ng => tr·∫£ ra HTTP status 201
  it("should call endpoint id with true, return 201", async () => {
    //khai b√°o bi·∫øn response nh·∫≠n gi√° tr·ªã response khi call api update tr·∫£ v·ªÅ
    const response = await required( //d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
      `https://gce.onedev.top/api/v1/news/${id}`) //link api truy·ªÅn th√™m id
      .put("") //ph∆∞∆°ng th·ª©c put
      .send(body) // //g·ª≠i request body l√™n
      .set("Authorization", `Bearer ${access_token}`); // set access_token ƒë·ªÉ g·ªçi ƒë∆∞·ª£c api
    expect(response.statusCode).toBe(201); //so s√°nh http status th√†nh c√¥ng tr·∫£ ra 201 => ƒë√∫ng
  }, 10000);

  //vi·∫øt code test id sai => tr·∫£ ra HTTP status 404
  it("should call endpoint id with false, return 404", async () => {
    //khai b√°o bi·∫øn response nh·∫≠n gi√° tr·ªã response khi call api update tr·∫£ v·ªÅ
    const response = await required(//d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
      `https://gce.onedev.top/api/v1/news/${id}`) //link api truy·ªÅn th√™m id
      .put("") // ph∆∞∆°ng th·ª©c put
      .send(body) //g·ª≠i request body l√™n
      .set("Authorization", `Bearer ${access_token}`); // set access_token ƒë·ªÉ g·ªçi ƒë∆∞·ª£c api
    expect(response.statusCode).toBe(404); //so s√°nh http status th·∫•t b·∫°i tr·∫£ ra 404 => id sai
  }, 10000);

  //vi·∫øt code test request body g·ª≠i l√™n ƒë√∫ng => tr·∫£ ra HTTP status 201
  it("should call request body, return 201", async () => {
    //khai b√°o bi·∫øn response nh·∫≠n gi√° tr·ªã response khi call api update tr·∫£ v·ªÅ
    const response = await required(//d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
      `https://gce.onedev.top/api/v1/news/${id}`) //link api truy·ªÅn th√™m id
      .put("") // ph∆∞∆°ng th·ª©c put
      .send(body) //g·ª≠i request body l√™n
      .set("Authorization", `Bearer ${access_token}`); // set access_token ƒë·ªÉ g·ªçi ƒë∆∞·ª£c api
    expect(response.statusCode).toBe(201); //so s√°nh http status th√†nh c√¥ng tr·∫£ ra 201 => ƒë√∫ng
  }, 10000);

  //vi·∫øt code test request body g·ª≠i l√™n sai => tr·∫£ ra HTTP status 400
  it("should call request body, return 400", async () => {
      //khai b√°o bi·∫øn response nh·∫≠n gi√° tr·ªã response khi call api update tr·∫£ v·ªÅ
    const response = await required(//d√πng required c·ªßa th∆∞ vi·ªán supertest ƒë·ªÉ call api
      `https://gce.onedev.top/api/v1/news/${id}`) //link api truy·ªÅn th√™m id
      .put("") // ph∆∞∆°ng th·ª©c put
      .send(body) //g·ª≠i request body l√™n
      .set("Authorization", `Bearer ${access_token}`); // set access_token ƒë·ªÉ g·ªçi ƒë∆∞·ª£c api
    expect(response.statusCode).toBe(400); //so s√°nh http status th·∫•t b·∫°i tr·∫£ ra 400 => request body g·ª≠i l√™n sai
  }, 10000);
});
